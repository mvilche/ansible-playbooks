- hosts: all
#  remote_user: 
  become: true
  become_method: sudo
  vars_files:
    - envs.yaml
  tasks:

  - name: VALIDANDO REQUESITOS PREVIOS
    fail:
      msg: EL SERVIDOR DONDE INTENTA EJECUTAR NO CUMPLE LOS REQUERIMIENTOS REQUERIDOS. REQUIERE SISTEMA OPERATIVO CENTOS
    when: ansible_facts['distribution'] != "CentOS" 

  - name: ACTUALIZANDO PAQUETES DEL SISTEMA OPERATIVO
    yum:
      name: '*'
      state: latest

  - name: INSTALANDO DEPENDENCIAS PREVIAS
    yum:
      name: 
        - curl
        - telnet
        - glibc-common
        - https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
      state: latest
      update_cache: true

  - name: INSTALANDO REPO ADICIONAL
    yum:
      name: 
        - https://rpms.remirepo.net/enterprise/remi-release-7.rpm
      state: latest
      update_cache: true

  - name: INSTALANDO DEPENDENCIAS
    yum:
      name: 
        - nodejs
        - git
        - php73-php
        - php73-php-soap
        - php73-php-imap
        - php73-php-opcache
        - php73-php-pdo
        - php73-php-xml
        - php73-php-json
        - php73-php-cli
        - php73-php-common
        - php73-php-intl 
        - php73-php-mysqlnd 
        - php73-php-geos 
        - php73-php-pecl-geoip 
        - php73-php-mbstring 
        - php73-php-pecl-zip 
        - php73-php-gd 
        - php73-php-ldap
        - php73-php-bcmath 
        - openssl 
        - unzip
        - nc 
        - httpd 
        - which
      state: latest
      enablerepo: remi
      update_cache: true

  - name: DESCARGANDO CERTIFICADOS CA
    file:
      path: "{{ item }}"
      state: directory
    with_items:
      - '/etc/httpd/ca'
  - get_url:
      url: "https://curl.haxx.se/ca/cacert.pem" 
      dest: /etc/httpd/ca/cacert.pem

  - name: CONFIGURANDO HTTPD
    copy:
      dest: "/etc/httpd/conf.d/security.conf"
      content: |
        ### ACTIVAR MODULOS MODSECURITY
        ### activar modo produccion -  desactivar versiones y notas del servidor
        ServerSignature Off
        ServerTokens Prod
        ServerName ${HOSTNAME}
        ############

        ###HEADERS DE SEGURIDAD
        TraceEnable off
        FileETag None
        Header unset server
        Header set X-XSS-Protection 1;mode=block
        Header set X-Content-Type-Options nosniff
        Header set X-Robots-Tag: none
        Header set X-Frame-Options: SAMEORIGIN
        Header unset X-Powered-By
        Header unset ETag
        #######

        DocumentRoot "/var/www/html"

        <Directory "/var/www/html">
            Options Indexes FollowSymLinks
            AllowOverride All
            Require all granted
        </Directory>
  - copy:
      dest: "/etc/opt/remi/php73/php.d/99-custom_overrides.ini"
      content: |
        display_errors = Off
        display_startup_errors = Off
        error_reporting = E_ERROR | E_WARNING | E_PARSE | E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_COMPILE_WARNING | E_RECOVERABLE_ERROR
        log_errors = On
        upload_max_filesize = 8M
        post_max_size = 32M
        curl.cainfo="/etc/httpd/ca/cacert.pem"
        openssl.cafile="/etc/httpd/ca/cacert.pem"
        error_log = /dev/stderr
        log_errors_max_len = 1024
        ignore_repeated_errors = On
        ignore_repeated_source = Off
        html_errors = Off
        session.save_path = /tmp  
  - file:
      path: /etc/httpd/conf.d/welcome.conf
      state: absent
  - shell: rm -rf /var/www/html/*
  - shell: sed -i -e "s/^LoadModule mpm_event_module/#LoadModule mpm_event_module/" /etc/httpd/conf.modules.d/00-mpm.conf
  - shell: sed -i -e "s/^#LoadModule mpm_prefork_module/LoadModule mpm_prefork_module/" /etc/httpd/conf.modules.d/00-mpm.conf
  
  - shell: sed -i -e "s/^LoadModule mpm_worker_module/#LoadModule mpm_worker_module/" /etc/httpd/conf.modules.d/00-mpm.conf
  - copy:
      dest: "/etc/profile.d/enable_php.sh"
      content: |
        #!/bin/bash
        export LANG=es_ES.UTF-8
        export LANGUAGE=es_ES.UTF-8
        export LC_COLLATE=C
        export PATH=/opt/remi/php73/root/usr/bin:/opt/remi/php73/root/usr/sbin${PATH:+:${PATH}}
        export LD_LIBRARY_PATH=/opt/remi/php73/root/usr/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
        export MANPATH=/opt/remi/php73/root/usr/share/man:${MANPATH}  

  - name: ACTIVANDO SERVICIO DE HTTPD
    systemd:
      name: httpd
      enabled: yes
      daemon_reload: yes
      masked: no

  - name: INICIANDO HTTPD
    systemd:
      name: httpd
      state: started

  - name: ACTIVANDO SERVICIO DE FIREWALLD
    systemd:
      name: firewalld
      enabled: yes
      daemon_reload: yes
      masked: no

  - name: INICIANDO FIREWALLD
    systemd:
      name: firewalld
      state: started

  - name: HABILITANDO PUERTOS NECESARIOS EN FIREWALL
    firewalld:
      port: 80/tcp
      permanent: yes
      state: enabled
      immediate: yes
  - firewalld:
      port: 443/tcp
      permanent: yes
      state: enabled
      immediate: yes       

  - name: CREANDO ARCHIVO DE EJEMPLO
    copy:
      dest: "/var/www/html/index.html"
      content: |
        <h1>WORK</h1>

  - name: COMPROBANDO ESTADO DE HTTPD
    uri:
      url: http://localhost
      status_code: 200
    register: result
    until: result.status == 200
    retries: 60
    delay: 10


  - name: DESCARGANDO WORDPRESS
    get_url:
      url: "https://wordpress.org/wordpress-5.4.1.tar.gz" 
      dest: /tmp/wordpress.tar.gz
  - get_url:
      url: "https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar" 
      dest: /usr/bin/wp
      mode: uog+x     

  - name: INSTALANDO WORDPRESS
    file:
      path: /var/www/html
      state: absent
  - file:
      path: "{{ item }}"
      state: directory
      group: apache
      owner: apache      
    with_items:
      - '/var/www/html'

  - unarchive:
      src: /tmp/wordpress.tar.gz 
      dest: /var/www/html
      extra_opts: 
        - --strip-components=1
        - -C 
        - /var/www/html
      remote_src: yes
      group: apache
      owner: apache
  - file:
      path: /tmp/wordpress.tar.gz
      state: absent         
  - copy:
      dest: "/var/www/html/wp-config.php"
      content: |
        <?php
        /**
          * The base configuration for WordPress
          *
          * The wp-config.php creation script uses this file during the
          * installation. You don't have to use the web site, you can
          * copy this file to "wp-config.php" and fill in the values.
          *
          * This file contains the following configurations:
          *
          * * MySQL settings
          * * Secret keys
          * * Database table prefix
          * * ABSPATH
          *
          * @link https://wordpress.org/support/article/editing-wp-config-php/
          *
          * @package WordPress
          */
        
        // ** MySQL settings - You can get this info from your web host ** //
        /** The name of the database for WordPress */
        define( 'DB_NAME', '{{ mysql_database }}' );
        
        /** MySQL database username */
        define( 'DB_USER', '{{ mysql_user }}' );
        
        /** MySQL database password */
        define( 'DB_PASSWORD', '{{ mysql_password }}' );
        
        /** MySQL hostname */
        define( 'DB_HOST', '{{ mysql_host }}' );
        
        /** Database Charset to use in creating database tables. */
        define( 'DB_CHARSET', 'utf8' );
        
        /** The Database Collate type. Don't change this if in doubt. */
        define( 'DB_COLLATE', '' );
        
        /**#@+
          * Authentication Unique Keys and Salts.
          *
          * Change these to different unique phrases!
          * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
          * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
          *
          * @since 2.6.0
          */
        define( 'AUTH_KEY',         'put your unique phrase here' );
        define( 'SECURE_AUTH_KEY',  'put your unique phrase here' );
        define( 'LOGGED_IN_KEY',    'put your unique phrase here' );
        define( 'NONCE_KEY',        'put your unique phrase here' );
        define( 'AUTH_SALT',        'put your unique phrase here' );
        define( 'SECURE_AUTH_SALT', 'put your unique phrase here' );
        define( 'LOGGED_IN_SALT',   'put your unique phrase here' );
        define( 'NONCE_SALT',       'put your unique phrase here' );
        
        /**#@-*/
        
        /**
          * WordPress Database Table prefix.
          *
          * You can have multiple installations in one database if you give each
          * a unique prefix. Only numbers, letters, and underscores please!
          */
        $table_prefix = 'wp_';
        
        /**
          * For developers: WordPress debugging mode.
          *
          * Change this to true to enable the display of notices during development.
          * It is strongly recommended that plugin and theme developers use WP_DEBUG
          * in their development environments.
          *
          * For information on other constants that can be used for debugging,
          * visit the documentation.
          *
          * @link https://wordpress.org/support/article/debugging-in-wordpress/
          */
        define( 'WP_DEBUG', false );
        define("WPLANG", "es_ES");
        define('FS_METHOD', 'direct');
        
        /* That's all, stop editing! Happy publishing. */
        
        /** Absolute path to the WordPress directory. */
        if ( ! defined( 'ABSPATH' ) ) {
          define( 'ABSPATH', __DIR__ . '/' );
        }
        
        /** Sets up WordPress vars and included files. */
        require_once ABSPATH . 'wp-settings.php';


  - name: COMPROBANDO ESTADO DE WORDPRESS
    uri:
      url: http://localhost/wp-admin/install.php
      status_code: 200
    register: result
    until: result.status == 200
    retries: 60
    delay: 10